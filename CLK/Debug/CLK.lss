
CLK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bd  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00000ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000431  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	17 c1       	rjmp	.+558    	; 0x23a <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	f4 c1       	rjmp	.+1000   	; 0x3f8 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ed       	ldi	r30, 0xDA	; 218
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 30       	cpi	r26, 0x0A	; 10
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	36 c2       	rjmp	.+1132   	; 0x4d6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
volatile uint8_t portDtmp = 0b00000111; // default is high because of the pull-up

void PWM(void);

int main(void) {
	DDRC=(uint8_t)0b00111111; 	// set bits 0..5 in DDR of the C ports to 1, these are outputs
  6c:	8f e3       	ldi	r24, 0x3F	; 63
  6e:	87 b9       	out	0x07, r24	; 7
	DDRD=(uint8_t)0b11111000; 	// 0..2 are buttons, 3..7 are LEDs
  70:	88 ef       	ldi	r24, 0xF8	; 248
  72:	8a b9       	out	0x0a, r24	; 10
	PORTD=(uint8_t)portDtmp; 	// turn on pull-up resitors pins 0..3, these will be buttons 
  74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  78:	8b b9       	out	0x0b, r24	; 11
	
	// interrupt enable
	PCICR|=(1<<PCIE2);	// set PCIE2 bit to 1 -> allows interrupt enable for PCINT16..23
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	84 60       	ori	r24, 0x04	; 4
  82:	80 83       	st	Z, r24
	PCMSK2|=(1<<PCINT18) | (1<<PCINT17) | (1<<PCINT16);	// enable interrupt for buttons, PCINT16..18
  84:	ed e6       	ldi	r30, 0x6D	; 109
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	87 60       	ori	r24, 0x07	; 7
  8c:	80 83       	st	Z, r24
	
	GTCCR|=(1<<TSM) | (1<<PSRASY);  // GTCCR -> General Timer/Counter Control Register
  8e:	83 b5       	in	r24, 0x23	; 35
  90:	82 68       	ori	r24, 0x82	; 130
  92:	83 bd       	out	0x23, r24	; 35
	// TSM -> Timer Synchronisation Mode: PSRASY bit will not be set to 0 by hardware
	// PSRASY -> prescaler reset for timer 2
	
	// timer 0 for pulse width modulation:
	TCCR0A|=(1<<WGM01); 	// CTC mode, turns on Clear Timer on Compare Match
  94:	84 b5       	in	r24, 0x24	; 36
  96:	82 60       	ori	r24, 0x02	; 2
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01);  	// Prescaler 8
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	85 bd       	out	0x25, r24	; 37
	OCR0A=125-1; 			// TCNT0=4, then end of counter -> 256*4/1000000 = 1024ms Intervall
  a0:	8c e7       	ldi	r24, 0x7C	; 124
  a2:	87 bd       	out	0x27, r24	; 39
	TIMSK0|=(1<<OCIE0A);  	// Enable Compare Interrupt
  a4:	ee e6       	ldi	r30, 0x6E	; 110
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
	TIMSK0|=(1<<TOIE0);   	// Timer0/Counter0 Interrupt Mask Register, TOIE0 -> Overflow Interrupt enable
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24
	
	// setup asynchronous timer for Timer 2 (quartz crystal) -> keeps time in PWR_SAVE
	ASSR|=(1<<AS2);			// turn async mode on, Timer 2 -> quartz
  b4:	e6 eb       	ldi	r30, 0xB6	; 182
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	TCCR2A|=(1<<WGM21); 	// CTC Mode for Timer 2
  be:	e0 eb       	ldi	r30, 0xB0	; 176
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
	TCCR2B|=(1<<CS22) | (1<<CS21);	// set prescaler to 256
  c8:	e1 eb       	ldi	r30, 0xB1	; 177
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	80 83       	st	Z, r24
	OCR2A=128-1;
  d2:	8f e7       	ldi	r24, 0x7F	; 127
  d4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7ff0b3>
	// Timer 2 frequency = TCCR2B*OCR2A/Quartz Frequency -> 256*128/32768 = 1s intervall
	TIMSK2|=(1<<OCIE2A);	// enable Compare Interrupt
  d8:	e0 e7       	ldi	r30, 0x70	; 112
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	TIMSK2|=(1<<TOIE2);		// enable Overflow Interrupt
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	
	GTCCR&=~(1<<TSM); 		// start timers
  e8:	83 b5       	in	r24, 0x23	; 35
  ea:	8f 77       	andi	r24, 0x7F	; 127
  ec:	83 bd       	out	0x23, r24	; 35
	sei(); // enable global interrupts, set interrupt bit to 0 and I-Bit in SREG to 1
  ee:	78 94       	sei
	
	// Power saving:
	sleep_enable();
  f0:	83 b7       	in	r24, 0x33	; 51
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
  f6:	83 b7       	in	r24, 0x33	; 51
  f8:	81 7f       	andi	r24, 0xF1	; 241
  fa:	86 60       	ori	r24, 0x06	; 6
  fc:	83 bf       	out	0x33, r24	; 51
	power_adc_disable();
  fe:	e4 e6       	ldi	r30, 0x64	; 100
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	power_twi_disable();
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
	power_timer1_disable();
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
	power_usart0_disable();
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
	power_timer0_enable();
 11a:	80 81       	ld	r24, Z
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	80 83       	st	Z, r24
	
	sleep_mode(); // toggle sleep mode
 120:	83 b7       	in	r24, 0x33	; 51
 122:	81 60       	ori	r24, 0x01	; 1
 124:	83 bf       	out	0x33, r24	; 51
 126:	88 95       	sleep
 128:	83 b7       	in	r24, 0x33	; 51
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	83 bf       	out	0x33, r24	; 51
	while(1) {
		if(pwm_mode==0) {
 12e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 132:	81 11       	cpse	r24, r1
 134:	fc cf       	rjmp	.-8      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 136:	83 b7       	in	r24, 0x33	; 51
 138:	81 7f       	andi	r24, 0xF1	; 241
 13a:	86 60       	ori	r24, 0x06	; 6
 13c:	83 bf       	out	0x33, r24	; 51
			sleep_mode();
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	81 60       	ori	r24, 0x01	; 1
 142:	83 bf       	out	0x33, r24	; 51
 144:	88 95       	sleep
 146:	83 b7       	in	r24, 0x33	; 51
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	83 bf       	out	0x33, r24	; 51
 14c:	f0 cf       	rjmp	.-32     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>

0000014e <PWM>:
	}
}

// Pulse Width Modulation calculation
void PWM() {
	if((millisecond<((pwm_mode)*5)-(4) || pwm_mode==3) && pwm_mode!=0) { // turn on LEDs constantly at brightest mode
 14e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <millisecond>
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	84 0f       	add	r24, r20
 166:	95 1f       	adc	r25, r21
 168:	04 97       	sbiw	r24, 0x04	; 4
 16a:	28 17       	cp	r18, r24
 16c:	39 07       	cpc	r19, r25
 16e:	2c f0       	brlt	.+10     	; 0x17a <PWM+0x2c>
 170:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f0       	breq	.+2      	; 0x17a <PWM+0x2c>
 178:	51 c0       	rjmp	.+162    	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
 17a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 17e:	88 23       	and	r24, r24
 180:	09 f4       	brne	.+2      	; 0x184 <PWM+0x36>
 182:	4c c0       	rjmp	.+152    	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
		sleep_disable();
 184:	83 b7       	in	r24, 0x33	; 51
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	83 bf       	out	0x33, r24	; 51
		tmp=minute;
 18a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 18e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		tmp = (tmp & 0xF0) >> 4 | (tmp & 0x0F) << 4;
 192:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 196:	28 2f       	mov	r18, r24
 198:	22 95       	swap	r18
 19a:	2f 70       	andi	r18, 0x0F	; 15
 19c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tmp>
 1a0:	30 e1       	ldi	r19, 0x10	; 16
 1a2:	93 9f       	mul	r25, r19
 1a4:	c0 01       	movw	r24, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	82 2b       	or	r24, r18
 1aa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		tmp = (tmp & 0xCC) >> 2 | (tmp & 0x33) << 2;
 1ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 1b2:	8c 7c       	andi	r24, 0xCC	; 204
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	9c 01       	movw	r18, r24
 1b8:	35 95       	asr	r19
 1ba:	27 95       	ror	r18
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tmp>
 1c4:	93 73       	andi	r25, 0x33	; 51
 1c6:	89 2f       	mov	r24, r25
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 2b       	or	r24, r18
 1d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		tmp = (tmp & 0xAA) >> 1 | (tmp & 0x55) << 1;
 1d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 1dc:	8a 7a       	andi	r24, 0xAA	; 170
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9c 01       	movw	r18, r24
 1e2:	35 95       	asr	r19
 1e4:	27 95       	ror	r18
 1e6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tmp>
 1ea:	95 75       	andi	r25, 0x55	; 85
 1ec:	89 2f       	mov	r24, r25
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	82 2b       	or	r24, r18
 1f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		// reverse minute byte, because port C is oriented the other way
		PORTC=(tmp>>2);
 1fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	88 b9       	out	0x08, r24	; 8
		PORTD=(hour<<3)|0b00000111;
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	87 60       	ori	r24, 0x07	; 7
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	08 95       	ret
	} else {
		sleep_disable();
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	83 bf       	out	0x33, r24	; 51
		if(mode!=1) {PORTC=0x00;}
 222:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mode>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	09 f0       	breq	.+2      	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
 22a:	18 b8       	out	0x08, r1	; 8
		if(mode!=2) {PORTD=(0x00<<3)|0b00000111;}
 22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mode>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	11 f0       	breq	.+4      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	8b b9       	out	0x0b, r24	; 11
 238:	08 95       	ret

0000023a <__vector_5>:
		// set LEDs unused by mode to 0, for seeing which mode you're in
	}
}

// Interruptserviceroutine for PCINT16..18
ISR(PCINT2_vect) { 
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	uint8_t changedbits;
	changedbits = PIND ^ portDtmp;
 258:	29 b1       	in	r18, 0x09	; 9
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	28 27       	eor	r18, r24
	portDtmp = PIND;
 260:	89 b1       	in	r24, 0x09	; 9
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	bounce=(bounce+1)%2; // % 2 for pressing down and letting go 
 266:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	90 78       	andi	r25, 0x80	; 128
 272:	99 23       	and	r25, r25
 274:	24 f4       	brge	.+8      	; 0x27e <__vector_5+0x44>
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	8e 6f       	ori	r24, 0xFE	; 254
 27a:	9f 6f       	ori	r25, 0xFF	; 255
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	if(bounce==0) {		
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 286:	81 11       	cpse	r24, r1
 288:	7c c0       	rjmp	.+248    	; 0x382 <__stack+0x83>
		if(changedbits & (1 << PD0)) // PCINT16 changed, down/- button
 28a:	20 ff       	sbrs	r18, 0
 28c:	30 c0       	rjmp	.+96     	; 0x2ee <__vector_5+0xb4>
		{
			switch(mode) {
 28e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mode>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	99 f0       	breq	.+38     	; 0x2bc <__vector_5+0x82>
 296:	18 f0       	brcs	.+6      	; 0x29e <__vector_5+0x64>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	e9 f0       	breq	.+58     	; 0x2d6 <__vector_5+0x9c>
 29c:	28 c0       	rjmp	.+80     	; 0x2ee <__vector_5+0xb4>
				case 0: // BRIGHTNESS
					pwm_mode=(pwm_mode-1)%4;
 29e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	83 70       	andi	r24, 0x03	; 3
 2a8:	90 78       	andi	r25, 0x80	; 128
 2aa:	99 23       	and	r25, r25
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <__vector_5+0x7c>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	8c 6f       	ori	r24, 0xFC	; 252
 2b2:	9f 6f       	ori	r25, 0xFF	; 255
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <pwm_mode>
					break;
 2ba:	19 c0       	rjmp	.+50     	; 0x2ee <__vector_5+0xb4>
				
				case 1: // HOUR
					hour--;
 2bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
					if(hour>24) { // overflow (0xFF), because hour == -1
 2c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 2ca:	89 31       	cpi	r24, 0x19	; 25
 2cc:	80 f0       	brcs	.+32     	; 0x2ee <__vector_5+0xb4>
						hour=23;
 2ce:	87 e1       	ldi	r24, 0x17	; 23
 2d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <__vector_5+0xb4>
					}
					break;
				
				case 2: // MINUTE
					minute--;
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minute>
					if(minute>60) {
 2e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 2e4:	8d 33       	cpi	r24, 0x3D	; 61
 2e6:	18 f0       	brcs	.+6      	; 0x2ee <__vector_5+0xb4>
						minute=59;
 2e8:	8b e3       	ldi	r24, 0x3B	; 59
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minute>
					}
					break;
			}
		}
		
		if(changedbits & (1 << PD1)) // PCINT17 changed, up/+ button
 2ee:	21 ff       	sbrs	r18, 1
 2f0:	3d c0       	rjmp	.+122    	; 0x36c <__stack+0x6d>
		{
			switch(mode) {
 2f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mode>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	11 f1       	breq	.+68     	; 0x33e <__stack+0x3f>
 2fa:	18 f0       	brcs	.+6      	; 0x302 <__stack+0x3>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	59 f1       	breq	.+86     	; 0x356 <__stack+0x57>
 300:	35 c0       	rjmp	.+106    	; 0x36c <__stack+0x6d>
				case 0: // BRIGHTNESS
					pwm_mode=(pwm_mode+1)%4;
 302:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	83 70       	andi	r24, 0x03	; 3
 30c:	90 78       	andi	r25, 0x80	; 128
 30e:	99 23       	and	r25, r25
 310:	24 f4       	brge	.+8      	; 0x31a <__stack+0x1b>
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	8c 6f       	ori	r24, 0xFC	; 252
 316:	9f 6f       	ori	r25, 0xFF	; 255
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <pwm_mode>
					if(pwm_mode==3) { // at brightest pwm and timer 0 get disabled and PWR SAVE sleepmodi is used
 31e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <pwm_mode>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	31 f4       	brne	.+12     	; 0x332 <__stack+0x33>
						power_timer0_disable(); // or set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 326:	e4 e6       	ldi	r30, 0x64	; 100
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 62       	ori	r24, 0x20	; 32
 32e:	80 83       	st	Z, r24
 330:	1d c0       	rjmp	.+58     	; 0x36c <__stack+0x6d>
					} else {
						power_timer0_enable(); // or set_sleep_mode(SLEEP_MODE_IDLE);
 332:	e4 e6       	ldi	r30, 0x64	; 100
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	80 83       	st	Z, r24
 33c:	17 c0       	rjmp	.+46     	; 0x36c <__stack+0x6d>
					}
					break;
				
				case 1: // HOUR
					hour++;
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
					if(hour==24) {
 348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	71 f4       	brne	.+28     	; 0x36c <__stack+0x6d>
						hour=0;
 350:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
 354:	0b c0       	rjmp	.+22     	; 0x36c <__stack+0x6d>
					}
					break;
				
				case 2: // MINUTE
					minute++;
 356:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minute>
					if(minute==60) {
 360:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 364:	8c 33       	cpi	r24, 0x3C	; 60
 366:	11 f4       	brne	.+4      	; 0x36c <__stack+0x6d>
						minute=0;
 368:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minute>
					}
					break;
			}
		}
		
		if(changedbits & (1 << PD2))
 36c:	22 ff       	sbrs	r18, 2
 36e:	09 c0       	rjmp	.+18     	; 0x382 <__stack+0x83>
		{
			mode=(mode+1)%3; // PCINT18 changed, mode button
 370:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mode>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	85 d0       	rcall	.+266    	; 0x488 <__divmodhi4>
 37e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mode>
		}
	}
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_14>:

// Will be called about ever millisecond
ISR(TIMER0_COMPA_vect) {	// at Timer0 compare,
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	millisecond=(millisecond+1)%23; // 23 is for the pulse width
 3c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <millisecond>
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	67 e1       	ldi	r22, 0x17	; 23
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	5c d0       	rcall	.+184    	; 0x488 <__divmodhi4>
 3d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <millisecond>
	PWM();
 3d4:	bc de       	rcall	.-648    	; 0x14e <PWM>
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <__vector_7>:

// Will be called every second
ISR(TIMER2_COMPA_vect) { 	// at Timer2 compare, generate timebase 
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
	second++;
 41a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <second>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <second>
	if(second>=60) {
 424:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <second>
 428:	8c 33       	cpi	r24, 0x3C	; 60
 42a:	c0 f0       	brcs	.+48     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		second=0;
 42c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <second>
		minute++;
 430:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minute>
		if(minute>=60) {
 43a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minute>
 43e:	8c 33       	cpi	r24, 0x3C	; 60
 440:	68 f0       	brcs	.+26     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			minute=0;
 442:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minute>
			hour++;
 446:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
			if(hour>=24) {hour=0;}
 450:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	10 f0       	brcs	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hour>
		}
	}
	
	PORTB = PORTB ^ 0b00000001; // output 0.5Hz at PB0 for measuring accuracy
 45c:	95 b1       	in	r25, 0x05	; 5
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	89 27       	eor	r24, r25
 462:	85 b9       	out	0x05, r24	; 5
	PWM();
 464:	74 de       	rcall	.-792    	; 0x14e <PWM>
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__divmodhi4>:
 488:	97 fb       	bst	r25, 7
 48a:	07 2e       	mov	r0, r23
 48c:	16 f4       	brtc	.+4      	; 0x492 <__divmodhi4+0xa>
 48e:	00 94       	com	r0
 490:	06 d0       	rcall	.+12     	; 0x49e <__divmodhi4_neg1>
 492:	77 fd       	sbrc	r23, 7
 494:	08 d0       	rcall	.+16     	; 0x4a6 <__divmodhi4_neg2>
 496:	0b d0       	rcall	.+22     	; 0x4ae <__udivmodhi4>
 498:	07 fc       	sbrc	r0, 7
 49a:	05 d0       	rcall	.+10     	; 0x4a6 <__divmodhi4_neg2>
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__divmodhi4_exit>

0000049e <__divmodhi4_neg1>:
 49e:	90 95       	com	r25
 4a0:	81 95       	neg	r24
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <__divmodhi4_neg2>:
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255

000004ac <__divmodhi4_exit>:
 4ac:	08 95       	ret

000004ae <__udivmodhi4>:
 4ae:	aa 1b       	sub	r26, r26
 4b0:	bb 1b       	sub	r27, r27
 4b2:	51 e1       	ldi	r21, 0x11	; 17
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__udivmodhi4_ep>

000004b6 <__udivmodhi4_loop>:
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	a6 17       	cp	r26, r22
 4bc:	b7 07       	cpc	r27, r23
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <__udivmodhi4_ep>
 4c0:	a6 1b       	sub	r26, r22
 4c2:	b7 0b       	sbc	r27, r23

000004c4 <__udivmodhi4_ep>:
 4c4:	88 1f       	adc	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	5a 95       	dec	r21
 4ca:	a9 f7       	brne	.-22     	; 0x4b6 <__udivmodhi4_loop>
 4cc:	80 95       	com	r24
 4ce:	90 95       	com	r25
 4d0:	bc 01       	movw	r22, r24
 4d2:	cd 01       	movw	r24, r26
 4d4:	08 95       	ret

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
